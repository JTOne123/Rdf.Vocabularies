









// <auto-generated />
using System;

namespace Vocab
{
    /// <summary>The OWL 2 Schema vocabulary (OWL 2) (http://www.w3.org/2002/07/owl#).</summary>
    public static partial class Owl
    {
        /// <summary>
        /// owl
        /// </summary>
        public const string Prefix="owl";

        /// <summary>
        /// http://www.w3.org/2002/07/owl#
        /// </summary>
        public const string BaseUri="http://www.w3.org/2002/07/owl#";

        
        /// <summary>
        /// The class of collections of pairwise different individuals.
        /// </summary>
        public const string AllDifferent = BaseUri + "AllDifferent";

        
        /// <summary>
        /// The class of collections of pairwise disjoint classes.
        /// </summary>
        public const string AllDisjointClasses = BaseUri + "AllDisjointClasses";

        
        /// <summary>
        /// The class of collections of pairwise disjoint properties.
        /// </summary>
        public const string AllDisjointProperties = BaseUri + "AllDisjointProperties";

        
        /// <summary>
        /// The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
        /// </summary>
        public const string Annotation = BaseUri + "Annotation";

        
        /// <summary>
        /// The class of annotation properties.
        /// </summary>
        public const string AnnotationProperty = BaseUri + "AnnotationProperty";

        
        /// <summary>
        /// The class of asymmetric properties.
        /// </summary>
        public const string AsymmetricProperty = BaseUri + "AsymmetricProperty";

        
        /// <summary>
        /// The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
        /// </summary>
        public const string Axiom = BaseUri + "Axiom";

        
        /// <summary>
        /// The class of OWL classes.
        /// </summary>
        public const string Class = BaseUri + "Class";

        
        /// <summary>
        /// The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
        /// </summary>
        public const string DataRange = BaseUri + "DataRange";

        
        /// <summary>
        /// The class of data properties.
        /// </summary>
        public const string DatatypeProperty = BaseUri + "DatatypeProperty";

        
        /// <summary>
        /// The class of deprecated classes.
        /// </summary>
        public const string DeprecatedClass = BaseUri + "DeprecatedClass";

        
        /// <summary>
        /// The class of deprecated properties.
        /// </summary>
        public const string DeprecatedProperty = BaseUri + "DeprecatedProperty";

        
        /// <summary>
        /// The class of functional properties.
        /// </summary>
        public const string FunctionalProperty = BaseUri + "FunctionalProperty";

        
        /// <summary>
        /// The class of inverse-functional properties.
        /// </summary>
        public const string InverseFunctionalProperty = BaseUri + "InverseFunctionalProperty";

        
        /// <summary>
        /// The class of irreflexive properties.
        /// </summary>
        public const string IrreflexiveProperty = BaseUri + "IrreflexiveProperty";

        
        /// <summary>
        /// The class of named individuals.
        /// </summary>
        public const string NamedIndividual = BaseUri + "NamedIndividual";

        
        /// <summary>
        /// The class of negative property assertions.
        /// </summary>
        public const string NegativePropertyAssertion = BaseUri + "NegativePropertyAssertion";

        
        /// <summary>
        /// The class of object properties.
        /// </summary>
        public const string ObjectProperty = BaseUri + "ObjectProperty";

        
        /// <summary>
        /// The class of ontologies.
        /// </summary>
        public const string Ontology = BaseUri + "Ontology";

        
        /// <summary>
        /// The class of ontology properties.
        /// </summary>
        public const string OntologyProperty = BaseUri + "OntologyProperty";

        
        /// <summary>
        /// The class of reflexive properties.
        /// </summary>
        public const string ReflexiveProperty = BaseUri + "ReflexiveProperty";

        
        /// <summary>
        /// The class of property restrictions.
        /// </summary>
        public const string Restriction = BaseUri + "Restriction";

        
        /// <summary>
        /// The class of symmetric properties.
        /// </summary>
        public const string SymmetricProperty = BaseUri + "SymmetricProperty";

        
        /// <summary>
        /// The class of transitive properties.
        /// </summary>
        public const string TransitiveProperty = BaseUri + "TransitiveProperty";

        
        /// <summary>
        /// This is the empty class.
        /// </summary>
        public const string Nothing = BaseUri + "Nothing";

        
        /// <summary>
        /// The class of OWL individuals.
        /// </summary>
        public const string Thing = BaseUri + "Thing";

        
        /// <summary>
        /// The property that determines the class that a universal property restriction refers to.
        /// </summary>
        public const string allValuesFrom = BaseUri + "allValuesFrom";

        
        /// <summary>
        /// The property that determines the predicate of an annotated axiom or annotated annotation.
        /// </summary>
        public const string annotatedProperty = BaseUri + "annotatedProperty";

        
        /// <summary>
        /// The property that determines the subject of an annotated axiom or annotated annotation.
        /// </summary>
        public const string annotatedSource = BaseUri + "annotatedSource";

        
        /// <summary>
        /// The property that determines the object of an annotated axiom or annotated annotation.
        /// </summary>
        public const string annotatedTarget = BaseUri + "annotatedTarget";

        
        /// <summary>
        /// The property that determines the predicate of a negative property assertion.
        /// </summary>
        public const string assertionProperty = BaseUri + "assertionProperty";

        
        /// <summary>
        /// The property that determines the cardinality of an exact cardinality restriction.
        /// </summary>
        public const string cardinality = BaseUri + "cardinality";

        
        /// <summary>
        /// The property that determines that a given class is the complement of another class.
        /// </summary>
        public const string complementOf = BaseUri + "complementOf";

        
        /// <summary>
        /// The property that determines that a given data range is the complement of another data range with respect to the data domain.
        /// </summary>
        public const string datatypeComplementOf = BaseUri + "datatypeComplementOf";

        
        /// <summary>
        /// The property that determines that two given individuals are different.
        /// </summary>
        public const string differentFrom = BaseUri + "differentFrom";

        
        /// <summary>
        /// The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
        /// </summary>
        public const string disjointUnionOf = BaseUri + "disjointUnionOf";

        
        /// <summary>
        /// The property that determines that two given classes are disjoint.
        /// </summary>
        public const string disjointWith = BaseUri + "disjointWith";

        
        /// <summary>
        /// The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
        /// </summary>
        public const string distinctMembers = BaseUri + "distinctMembers";

        
        /// <summary>
        /// The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
        /// </summary>
        public const string equivalentClass = BaseUri + "equivalentClass";

        
        /// <summary>
        /// The property that determines that two given properties are equivalent.
        /// </summary>
        public const string equivalentProperty = BaseUri + "equivalentProperty";

        
        /// <summary>
        /// The property that determines the collection of properties that jointly build a key.
        /// </summary>
        public const string hasKey = BaseUri + "hasKey";

        
        /// <summary>
        /// The property that determines the property that a self restriction refers to.
        /// </summary>
        public const string hasSelf = BaseUri + "hasSelf";

        
        /// <summary>
        /// The property that determines the individual that a has-value restriction refers to.
        /// </summary>
        public const string hasValue = BaseUri + "hasValue";

        
        /// <summary>
        /// The property that determines the collection of classes or data ranges that build an intersection.
        /// </summary>
        public const string intersectionOf = BaseUri + "intersectionOf";

        
        /// <summary>
        /// The property that determines that two given properties are inverse.
        /// </summary>
        public const string inverseOf = BaseUri + "inverseOf";

        
        /// <summary>
        /// The property that determines the cardinality of a maximum cardinality restriction.
        /// </summary>
        public const string maxCardinality = BaseUri + "maxCardinality";

        
        /// <summary>
        /// The property that determines the cardinality of a maximum qualified cardinality restriction.
        /// </summary>
        public const string maxQualifiedCardinality = BaseUri + "maxQualifiedCardinality";

        
        /// <summary>
        /// The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
        /// </summary>
        public const string members = BaseUri + "members";

        
        /// <summary>
        /// The property that determines the cardinality of a minimum cardinality restriction.
        /// </summary>
        public const string minCardinality = BaseUri + "minCardinality";

        
        /// <summary>
        /// The property that determines the cardinality of a minimum qualified cardinality restriction.
        /// </summary>
        public const string minQualifiedCardinality = BaseUri + "minQualifiedCardinality";

        
        /// <summary>
        /// The property that determines the class that a qualified object cardinality restriction refers to.
        /// </summary>
        public const string onClass = BaseUri + "onClass";

        
        /// <summary>
        /// The property that determines the data range that a qualified data cardinality restriction refers to.
        /// </summary>
        public const string onDataRange = BaseUri + "onDataRange";

        
        /// <summary>
        /// The property that determines the datatype that a datatype restriction refers to.
        /// </summary>
        public const string onDatatype = BaseUri + "onDatatype";

        
        /// <summary>
        /// The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
        /// </summary>
        public const string onProperties = BaseUri + "onProperties";

        
        /// <summary>
        /// The property that determines the property that a property restriction refers to.
        /// </summary>
        public const string onProperty = BaseUri + "onProperty";

        
        /// <summary>
        /// The property that determines the collection of individuals or data values that build an enumeration.
        /// </summary>
        public const string oneOf = BaseUri + "oneOf";

        
        /// <summary>
        /// The property that determines the n-tuple of properties that build a sub property chain of a given property.
        /// </summary>
        public const string propertyChainAxiom = BaseUri + "propertyChainAxiom";

        
        /// <summary>
        /// The property that determines that two given properties are disjoint.
        /// </summary>
        public const string propertyDisjointWith = BaseUri + "propertyDisjointWith";

        
        /// <summary>
        /// The property that determines the cardinality of an exact qualified cardinality restriction.
        /// </summary>
        public const string qualifiedCardinality = BaseUri + "qualifiedCardinality";

        
        /// <summary>
        /// The property that determines that two given individuals are equal.
        /// </summary>
        public const string sameAs = BaseUri + "sameAs";

        
        /// <summary>
        /// The property that determines the class that an existential property restriction refers to.
        /// </summary>
        public const string someValuesFrom = BaseUri + "someValuesFrom";

        
        /// <summary>
        /// The property that determines the subject of a negative property assertion.
        /// </summary>
        public const string sourceIndividual = BaseUri + "sourceIndividual";

        
        /// <summary>
        /// The property that determines the object of a negative object property assertion.
        /// </summary>
        public const string targetIndividual = BaseUri + "targetIndividual";

        
        /// <summary>
        /// The property that determines the value of a negative data property assertion.
        /// </summary>
        public const string targetValue = BaseUri + "targetValue";

        
        /// <summary>
        /// The property that determines the collection of classes or data ranges that build a union.
        /// </summary>
        public const string unionOf = BaseUri + "unionOf";

        
        /// <summary>
        /// The property that determines the collection of facet-value pairs that define a datatype restriction.
        /// </summary>
        public const string withRestrictions = BaseUri + "withRestrictions";

        
        /// <summary>
        /// The data property that does not relate any individual to any data value.
        /// </summary>
        public const string bottomDataProperty = BaseUri + "bottomDataProperty";

        
        /// <summary>
        /// The data property that relates every individual to every data value.
        /// </summary>
        public const string topDataProperty = BaseUri + "topDataProperty";

        
        /// <summary>
        /// The object property that does not relate any two individuals.
        /// </summary>
        public const string bottomObjectProperty = BaseUri + "bottomObjectProperty";

        
        /// <summary>
        /// The object property that relates every two individuals.
        /// </summary>
        public const string topObjectProperty = BaseUri + "topObjectProperty";

        
        /// <summary>
        /// The annotation property that indicates that a given ontology is backward compatible with another ontology.
        /// </summary>
        public const string backwardCompatibleWith = BaseUri + "backwardCompatibleWith";

        
        /// <summary>
        /// The annotation property that indicates that a given entity has been deprecated.
        /// </summary>
        public const string deprecated = BaseUri + "deprecated";

        
        /// <summary>
        /// The annotation property that indicates that a given ontology is incompatible with another ontology.
        /// </summary>
        public const string incompatibleWith = BaseUri + "incompatibleWith";

        
        /// <summary>
        /// The annotation property that indicates the predecessor ontology of a given ontology.
        /// </summary>
        public const string priorVersion = BaseUri + "priorVersion";

        
        /// <summary>
        /// The annotation property that provides version information for an ontology or another OWL construct.
        /// </summary>
        public const string versionInfo = BaseUri + "versionInfo";

    }
}